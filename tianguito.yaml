AWSTemplateFormatVersion: "2010-09-09"

Description: "Cloudformation de Tianguito."

Resources:
  TianguitoVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsHostnames: "true"
      EnableDnsSupport: "true"
      Tags:
      - Key: "Application"
        Value: Tianguito-stack
      - Key: "Name"
        Value: Tianguito

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1a"
      CidrBlock: "10.0.0.0/24"
      VpcId:
        Ref: TianguitoVPC
      Tags:
      - Key: "Name"
        Value: Tianguito-Pub-1
          
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1b"
      CidrBlock: "10.0.1.0/24"
      VpcId:
        Ref: TianguitoVPC
      Tags:
      - Key: "Name"
        Value: Tianguito-Pub-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1a"
      CidrBlock: "10.0.2.0/24"
      VpcId:
        Ref: TianguitoVPC
      Tags:
      - Key: "Name"
        Value: Tianguito-Priv-1
          
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1b"
      CidrBlock: "10.0.3.0/24"
      VpcId:
        Ref: TianguitoVPC
      Tags:
      - Key: "Name"
        Value: Tianguito-Priv-2
  
  RoutingTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: "Name"
        Value: Tianguito_Route_Table
      VpcId:
        Ref: TianguitoVPC

  TianguitoGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
      - Key: "Name"
        Value: Tianguito-Gateway
  
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: 
        Ref: TianguitoGateway
      VpcId: 
        Ref: TianguitoVPC
  
  AssociationPub1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: 
        Ref: RoutingTable
      SubnetId: 
        Ref: PublicSubnet1
  
  AssociationPub2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: 
        Ref: RoutingTable
      SubnetId: 
        Ref: PublicSubnet2

  AssociationPriv1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: 
        Ref: RoutingTable
      SubnetId: 
        Ref: PrivateSubnet1

  AssociationPriv2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: 
        Ref: RoutingTable
      SubnetId: 
        Ref: PrivateSubnet2

  TianguitoACL1:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags: 
      - Key: "Name"
        Value: TianguitoACL1
      VpcId: 
        Ref: TianguitoVPC

  ACLEntryHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      NetworkAclId: 
        Ref: TianguitoACL1
      PortRange:
        From: 80
        To: 80
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 100
  
  ACLEntryHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      NetworkAclId: 
        Ref: TianguitoACL1
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 110

  ACLEntrySSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      NetworkAclId: 
        Ref: TianguitoACL1
      PortRange:
        From: 22
        To: 22
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 120
    
  ACLEntryRDP:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      NetworkAclId: 
        Ref: TianguitoACL1
      PortRange:
        From: 3389
        To: 3389
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 130
  
  ACLEntryDNSUDP:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      NetworkAclId: 
        Ref: TianguitoACL1
      PortRange:
        From: 53
        To: 53
      Protocol: 17
      RuleAction: "allow"
      RuleNumber: 140

  ACLEntryDNSUDPTCP:
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      NetworkAclId: 
        Ref: TianguitoACL1
      PortRange:
        From: 53
        To: 53
      Protocol: 6
      RuleAction: "allow"
      RuleNumber: 150

  ACLAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: 
        Ref: TianguitoACL1
      SubnetId: 
        Ref: PublicSubnet1

  ACLAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: 
        Ref: TianguitoACL1
      SubnetId: 
        Ref: PublicSubnet2

  ACLAssociation3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: 
        Ref: TianguitoACL1
      SubnetId: 
        Ref: PrivateSubnet1
  
  ACLAssociation4:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: 
        Ref: TianguitoACL1
      SubnetId: 
        Ref: PrivateSubnet2

  TianguitoSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Tianguito security group 
      Tags: 
      - Key: "Name"
        Value: TianguitoSG
      VpcId: 
        Ref: TianguitoVPC

  SecurityGroupIngress1:
      Type: AWS::EC2::SecurityGroupIngress
      Properties: 
        CidrIp: 0.0.0.0/0
        FromPort: 8111
        GroupId: 
          Ref: TianguitoSG
        IpProtocol: tcp
        ToPort: 8111

  SecurityGroupIngress2:
      Type: AWS::EC2::SecurityGroupIngress
      Properties: 
        CidrIp: 0.0.0.0/0
        FromPort: 443
        GroupId: 
          Ref: TianguitoSG
        IpProtocol: tcp
        ToPort: 443

  SecurityGroupIngress3:
      Type: AWS::EC2::SecurityGroupIngress
      Properties: 
        CidrIp: 0.0.0.0/0
        FromPort: 80
        GroupId: 
          Ref: TianguitoSG
        IpProtocol: tcp
        ToPort: 80

  SecurityGroupIngress4:
      Type: AWS::EC2::SecurityGroupIngress
      Properties: 
        CidrIp: 0.0.0.0/0
        FromPort: 22
        GroupId: 
          Ref: TianguitoSG
        IpProtocol: tcp
        ToPort: 22
  
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: 
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      Tags: 
      - Key: "Name"
        Value: Tianguito-Public-Balancer
  
  S3Bucket: 
    Type: AWS::S3::Bucket 
    Properties:
      BucketName: tianguito-bucket1
      AccessControl: PublicRead 
      WebsiteConfiguration: 
        IndexDocument: index.html 
        ErrorDocument: error.html 
        RoutingRules: 
          - RoutingRuleCondition: 
              HttpErrorCodeReturnedEquals: '404' 
              KeyPrefixEquals: app/ 
            RedirectRule: 
              HostName: tianguito-bucket.us-east-1.amazonaws.com 
              ReplaceKeyPrefixWith: report-404/
    DeletionPolicy: Retain

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties: 
      AllocatedStorage: 20
      Engine: mariadb
      MasterUsername: root
      MasterUserPassword: Admin=6280
      DBInstanceClass: db.t3.micro
      DBName: TianguitoMarkets
      DBInstanceIdentifier: Tianguito-RDS

  DynamoDB:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions:
        -
          AttributeName: "Puesto"
          AttributeType: "S"
      KeySchema: 
        -
          AttributeName: "Puesto"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: Puestos

  LambdaAdminRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
  RootInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref LambdaAdminRole

  DynamoLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Role: !GetAtt LambdaAdminRole.Arn
      Runtime: nodejs12.x
      Handler: index.handler
      Code: 
        ZipFile: |
          const AWS = require("aws-sdk");
          AWS.config.update({
              accessKeyId: "ASIA4ZBKUXL4PFX2XSFW",
              secretAccessKey: "byqT3NsH7yFjZAs1+w7iSM0zPz1g92lsWv2mZ4MR",
              region: "us-east-1",
            });

            const dynamodb = new AWS.DynamoDB();

            const params = {
              TableName: "Puestos",
              Select: "SPECIFIC_ATTRIBUTES",
              AttributesToGet: ["Puesto","Mercado"],
            };
            
            const getPuestos = () => {
              return  dynamodb
              .scan(params)
              .promise()
              .then(({ Items }) => {
                return Items.map((item) => {
                  return { name: item.Puesto.S, market: item.Mercado.S };
                });
              })
            }

          exports.handler = async (event) => {

            const puestos = await getPuestos()
            const response = {
                  statusCode: 200,
                  body: {stands: puestos},
                  };
                  return response;
          };

  RDSLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Role: !GetAtt LambdaAdminRole.Arn
      Runtime: nodejs12.x
      Handler: index.handler
      Code: 
        ZipFile: |
          var mysql = require("promise-mysql");

          const createConnection = () => {
            return mysql.createConnection({
              host: "tianguito-rds.cyhw3fadblmi.us-east-1.rds.amazonaws.com",
              user: "root",
              password: "Admin=6280",
              port: "3306",
              database: "TianguitoMarkets",
            });
          };

          const findAll = () => {
            return createConnection()
              .then((connection) => {
                return connection.query("SELECT * FROM markets");
              })
              .then((markets) => {
                return markets;
              })
              .catch((error) => {
                throw error;
              });
          };

          exports.handler = async (event) => {
            const markets = await findAll();

            // TODO implement
            const response = {
              statusCode: 200,
              body: { markets },
            };

            return response;
          };

  AlexaLambda:
      Type: AWS::Lambda::Function
      Properties:
        Role: !GetAtt LambdaAdminRole.Arn
        Runtime: nodejs12.x
        Handler: index.handler 
        Code: 
          ZipFile: |
            exports.handler = async (event) => {
                // TODO implement
                const response = {
                    statusCode: 200,
                    body: JSON.stringify('Hello from Lambda!'),
                };
                return response;
            };

  CloudWatchAlarmRDS:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'Alarma de RDS'
      ComparisonOperator: LessThanThreshold
      DatapointsToAlarm: 1
      Dimensions:
      - Name: DBInstanceIdentifier
        Value: Tianguito-RDS
      EvaluationPeriods: 1
      MetricName: FreeStorageSpace
      Namespace: AWS/RDS
      Period: 60
      Statistic: Average
      Threshold: 2147483648
      TreatMissingData: ignore
      Unit: Bytes